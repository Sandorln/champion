# Bitbucket Pipelines Template to build, test your Android Application.

# This template contains 3 parallel steps to build Android application, run Android code scanning tool and run unit tests.
# For more details see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/

# Docker for Android SDK 30 with pre-installed build tools and emulator image.
# Note: This docker image is created and maintained by a non official third party. For more details see: https://hub.docker.com/r/androidsdk/android-30
image: androidsdk/android-30

pipelines:
  branches:
    master:
      - step:
          name: Create Keystore and API key
          script:
            # create the keystore file and the google play api key file
            - mkdir keys
            - echo $GOOGLE_PLAY_API_KEY_BASE64 | base64 --decode > keys/$GOOGLE_PLAY_API_KEY
            - echo $KEYSTORE_FILE_BASE64 | base64 --decode > keys/$KEYSTORE_FILE
          artifacts:
            - keys/**
      - parallel:           # running a set of steps at the same time https://support.atlassian.com/bitbucket-cloud/docs/set-up-or-run-parallel-steps/
          - step:
              name: Run unit tests
              caches:
                - gradle
              script:
                - export GRADLE_OPTS='-XX:+UseG1GC -XX:MaxGCPauseMillis=1000 -Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxPermSize=1024m -XX:ReservedCodeCacheSize=440m -XX:+UseCompressedOops -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" -Dorg.gradle.parallel=false -Dorg.gradle.daemon=false -Dorg.gradle.configureondemand=true'
                - "./gradlew -PKEYSTORE_FILE=../keys/$KEYSTORE_FILE
                             -PKEYSTORE_PASSWORD=$KEYSTORE_PASSWORD
                             -PKEY_ALIAS=$KEY_ALIAS
                             -PKEY_PASSWORD=$KEY_PASSWORD
                             -PGOOGLE_PLAY_API_KEY=../keys/$GOOGLE_PLAY_API_KEY
                             test"
              artifacts:
                - app/build/outputs/**
                - app/build/reports/**      
          - step:
              name: Build & deploy
              caches:
                - gradle
              script:
                # publish the aab file to the internal testing channel
                - export GRADLE_OPTS='-XX:+UseG1GC -XX:MaxGCPauseMillis=1000 -Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxPermSize=1024m -XX:ReservedCodeCacheSize=440m -XX:+UseCompressedOops -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" -Dorg.gradle.parallel=false -Dorg.gradle.daemon=false -Dorg.gradle.configureondemand=true'
                - "./gradlew -PKEYSTORE_FILE=../keys/$KEYSTORE_FILE
                             -PKEYSTORE_PASSWORD=$KEYSTORE_PASSWORD
                             -PKEY_ALIAS=$KEY_ALIAS
                             -PKEY_PASSWORD=$KEY_PASSWORD
                             -PGOOGLE_PLAY_API_KEY=../keys/$GOOGLE_PLAY_API_KEY
                             -PBUILD_NUMBER=$BITBUCKET_BUILD_NUMBER
                             clean :app:publishFreeReleaseBundle :app:publishProReleaseBundle"
              artifacts:
                - app/build/outputs/